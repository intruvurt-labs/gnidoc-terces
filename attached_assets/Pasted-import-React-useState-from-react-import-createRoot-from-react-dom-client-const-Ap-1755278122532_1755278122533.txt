import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';

const App = () => {
  const [prompt, setPrompt] = useState('');
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Function to handle the API call for image generation
  const generateImage = async () => {
    setLoading(true);
    setImageUrl(null);
    setError(null);
    try {
      const payload = {
        instances: [{ prompt: prompt }],
        parameters: { "sampleCount": 1 }
      };
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`API call failed with status: ${response.status}`);
      }

      const result = await response.json();
      if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
        const base64Data = result.predictions[0].bytesBase64Encoded;
        setImageUrl(`data:image/png;base64,${base64Data}`);
      } else {
        throw new Error('No image data found in the API response.');
      }
    } catch (err) {
      console.error('Error generating image:', err);
      setError('Failed to generate image. Please try a different prompt.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8 flex flex-col items-center">
      <div className="bg-white p-8 rounded-xl shadow-lg w-full max-w-2xl">
        <h1 className="text-4xl font-extrabold text-center text-gray-800 mb-6">
          ðŸŽ¨ AI Image Generator
        </h1>
        <p className="text-center text-gray-600 mb-8">
          Enter a descriptive prompt and click "Generate" to create a unique image.
        </p>
        
        <div className="flex flex-col sm:flex-row gap-4 mb-8">
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            onKeyPress={(e) => { if (e.key === 'Enter') generateImage(); }}
            placeholder="e.g., A futuristic city at sunset, neon lights, cyberpunk style"
            className="flex-grow p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200"
          />
          <button
            onClick={generateImage}
            disabled={loading || !prompt.trim()}
            className={`
              w-full sm:w-auto px-6 py-3 rounded-lg font-semibold
              transition-all duration-200
              ${loading || !prompt.trim()
                ? 'bg-blue-300 text-gray-500 cursor-not-allowed'
                : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'
              }
            `}
          >
            {loading ? 'Generating...' : 'Generate'}
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6 text-center">
            {error}
          </div>
        )}

        <div className="relative min-h-[300px] flex items-center justify-center bg-gray-200 rounded-xl overflow-hidden shadow-inner">
          {loading && (
            <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-800 bg-opacity-70 text-white z-10">
              <svg className="animate-spin h-10 w-10 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="mt-4 text-lg">Your image is being created...</p>
            </div>
          )}
          
          {imageUrl && (
            <img 
              src={imageUrl} 
              alt="Generated by AI" 
              className="w-full h-auto object-contain rounded-xl"
            />
          )}

          {!loading && !imageUrl && (
            <p className="text-gray-500 text-lg">
              The generated image will appear here.
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;
